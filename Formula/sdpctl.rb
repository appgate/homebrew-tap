# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Sdpctl < Formula
  desc "Official CLI tool for managing Appgate SDP Collectives"
  homepage "https://github.com/appgate/sdpctl/releases"
  version "2024.02.01"
  license "MIT"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/appgate/sdpctl/releases/appgate/sdpctl/releases/download/2024.02.01/sdpctl_2024.02.01_darwin_arm64.tar.gz"
      sha256 "45466319ccebeb65c441dc94cef48a7f40ee746818a6aad370e2148cf13108f0"

      def install
        bin.install "sdpctl"
        generate_completions_from_executable("#{bin}/sdpctl", "completion", shells: [:bash, :zsh, :fish])
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/appgate/sdpctl/releases/appgate/sdpctl/releases/download/2024.02.01/sdpctl_2024.02.01_darwin_amd64.tar.gz"
      sha256 "de59c9c92644d96a33fe23056ba88069eea381ad1f76f5154809c1bae09546fd"

      def install
        bin.install "sdpctl"
        generate_completions_from_executable("#{bin}/sdpctl", "completion", shells: [:bash, :zsh, :fish])
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/appgate/sdpctl/releases/appgate/sdpctl/releases/download/2024.02.01/sdpctl_2024.02.01_linux_arm64.tar.gz"
      sha256 "cc9f658ff47df60980d25fb9572eb8b902fc369ef7218b67bb8e427819ae7799"

      def install
        bin.install "sdpctl"
        generate_completions_from_executable("#{bin}/sdpctl", "completion", shells: [:bash, :zsh, :fish])
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/appgate/sdpctl/releases/appgate/sdpctl/releases/download/2024.02.01/sdpctl_2024.02.01_linux_amd64.tar.gz"
      sha256 "68e1c3428ddbe6bcf0506c1a15491508490bcca931dcc1ecc04a9275b8698419"

      def install
        bin.install "sdpctl"
        generate_completions_from_executable("#{bin}/sdpctl", "completion", shells: [:bash, :zsh, :fish])
      end
    end
  end

  test do
    version_output = shell_output("#{bin}/sdpctl --version")
    assert_match "sdpctl version #{version}", version_output.split("\n")[0]

    profile_add = shell_output("#{bin}/sdpctl profile add test")
    expected = "Created profile test, run 'sdpctl profile list' to see all available profiles\n" \
               "run 'sdpctl profile set test' to select the new profile"
    assert_match expected, profile_add

    profile_set = shell_output("#{bin}/sdpctl profile set test")
    expected = "test is selected as current sdp profile\n" \
               "test is not configured yet, run 'sdpctl configure'"
    assert_match expected, profile_set

    configure = shell_output("#{bin}/sdpctl configure https://example.com:8443")
    expected = "Configuration updated successfully"
    assert_match expected, configure
  end
end
